#!/usr/bin/env node

var fs       = require('fs');
var optimist = require('optimist');
var path     = require('path');
var glob     = require('glob');
var html2js  = require('../src/html2js');

//
// Setup usage and parse arguments
//

var argv = optimist.usage('Usage: $0 <input file> <output file>')
    // -m, --module option
    .alias('m', 'module')
    .string('m')
    .describe('m', 'If module name is provided, template will be packaged under this module.')
    // --module-var option
    .string('module-var')
    .describe('module-var', '--module-var is to be used with --module. If module-var is provided, it will pass module-var to immediately-invoked function expression (IIFE). Its default value is "module".')
    // -b, --basedir option
    .alias('b', 'basedir')
    .string('b')
    .describe('b', 'If basedir is provided, basedir will be removed from the templates\' path.')
    // -s, --strip-prefix option
    .alias('s', 'strip-prefix')
    .string('s')
    .describe('s', 'If strip-prefix is provided, strip-prefix will remove the given prefix from the filename')
     // -h, --help option
    .alias('h', 'help')
    .boolean('h')
    .describe('h', 'Shows usage message; what you are looking at.')
    .argv;

// if (argv._.length === 0 || argv.help) {
  // console.log(optimist.help());
  // process.exit();
// }

// console.log(argv);
var inputPattern = argv.g;
var outputFile = argv._[0];
var moduleName = argv.m;
var moduleVar = argv['module-var'];
var baseDir = argv.b;
var prefixToStrip = argv.s;

//
// Main script
//

var wordsMatchLeftJustified = function(word1, word2) {
  return word1.slice(0, word2.length) === word2;
};

var output;
var inputAlias;
var templates = glob.sync(inputPattern);
templates.forEach(function(template) {
  // console.log(template);
  var content= fs.readFileSync(template, "utf8");;
  if(!inputAlias) {
    inputAlias = template;
    output = html2js(inputAlias, content, moduleName, moduleVar, false);
  } else {
    output += html2js(inputAlias, content, moduleName, moduleVar, true)
  }
});
if(baseDir){
  baseDir = path.resolve(baseDir);
  inputAlias = inputAlias.replace(baseDir, '');
}
if (prefixToStrip) {
  if(wordsMatchLeftJustified(inputAlias, prefixToStrip) && (prefixToStrip !== inputAlias)) {
    inputAlias = inputAlias.replace(prefixToStrip, '');
  }
}
inputAlias = inputAlias.replace(/\\/g, '/');

if (outputFile) {
  fs.writeFileSync(outputFile, output, 'utf8');
} else {
  console.log(output);
}
